package main

import "fmt"

func main() {
	/*
	1.什么是变量?
	1.1在C语言中可以改变的数据我们称之为变量
	1.2Go语言和C语言一样, 改变的数据我们称之为变量

	2.为什么要定义变量?
	1.1在C语言中就是为了告诉操作系统, 需要分配多大的存储空间来存储数据
	1.2在Go语言中也是一样

	3.如何定义变量?
	3.1C语言定义变量的格式:   数据类型 变量名称;
	3.2Go语言中定义变量的格式:  var 变量名称 数据类型;

	4.如何使用变量?
	4.1C语言中如果变量名称在等号的左边, 代表往变量中存储数据
	   如果变量名称在等号的右边或者当初出现, 代表从变量中获取存储的数据
	4.2Go语言和C语言一样

	5.变量的初始化
	5.1在C语言中第一次给变量赋值我们称之为变量的初始化
	   在C语言中变量的初始化有两种方式: 1.先定义在初始化 2.定义的同时初始化
	5.2Go语言和C语言一样

	注意点:
	在Go语言中, 除了有和C语言一样的定义变量的格式以外, 还有一些其它的格式
	1.如果定义的同时初始化, 那么定义变量时, 数据类型可以省略(系统会自动根据赋值推倒变量的类型)
   2.如果定义的同时初始化, 那么定义变量时, 除了可以省略数据类型以外, 还可以利用:=继续省略var

	:=注意点:
	1.如果利用:=定义变量, 那么不能写var也不能写数据类型
	2.因为:=会先定义一个变量, 所以不能把:=当做=来使用
	 */

	 // 1.定义一个变量
	 /*
	 var num int
     num = 666
     // 注意点: 在Go语言中, 输出整型只能使用%d, 不能使用%i
     fmt.Printf("%d\n", num)
	 */

	 // 2.先定义再初始化
	// var num int
	// num = 888
	//fmt.Printf("%d\n", num)

	// 3.定义的同时初始化
	//var num int = 999
	//fmt.Printf("%d", num)

	// 4.定义的同时初始化, 并省略数据类型
	//var num  = 999
	//fmt.Printf("%d\n", num)
	//// 在Go语言中, 可以利用%T输出变量的数据类型
	//fmt.Printf("%T\n", num)

	// 5.定义的同时初始化, 并省略数据类型和var
	// :=做了两件事情 , 1.会先定义一个变量 2.给定义的变量赋值
	// 在Go语言开发中非常非常非常常用
	//num := 666
	//fmt.Printf("%d\n", num)

	// 6.:=注意点
	//var num := 666 // 语法错误
	//num int := 666 // 语法错误
	//fmt.Printf("%d\n", num)

	var num int = 666
	// var num int
	// num = 888
	num := 888 // 重复定义
	fmt.Printf("%d\n", num)
}
