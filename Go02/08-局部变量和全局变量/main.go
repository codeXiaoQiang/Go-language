package main

import "fmt"
func test()  {
	//fmt.Printf("%d\n", num)
	fmt.Printf("%d\n", value)
}
var value int // 全局变量
//var value int // 报错
func main() {
	/*
	1.什么是局部变量?
	1.1在C语言中写在{}中或者函数中或者函数的形参, 就是局部变量
	1.2Go语言中的局部变量和C语言一样

	2.什么是全局变量?
	2.1在C语言中写在函数外面的就是全局变量
	2.2Go语言中的全局变量和C语言一样

	3.局部变量和全局变量的作用域
	3.1在C语言中局部变量的作用域是从定义的那一行开始, 直到遇到}结束或者遇到return为止
	3.2Go语言中局部变量的作用域和C语言一样
	3.3在C语言中全部变量的作用域是从定义的那一行开始, 直到文件末尾为止
	3.4Go语言中的全局变量, 只要定义了, 在定义之前和定义之后都可以使用

	4.局部变量和全局变量的生命周期
	4.1在C语言中局部变量, 只有执行了才会分配存储空间, 只要离开作用域就会自动释放, C语言的局部变量存储在栈区
	4.2Go语言局部变量的生命周期和C语言一样
	4.3在C语言中全局变量, 只要程序一启动就会分配存储空间, 只有程序关闭才会释放存储空间, C语言的全局变量存储在静态区(数据区)
	4.4Go语言全局变量的生命周期和C语言一样

	5.局部变量和全局变量的注意点
	5.1在C语言中相同的作用域内, 不能出现同名的局部变量
	5.2Go语言和C语言一样, 相同干的作用域内, 不能出现同名的局部变量
	5.3在C语言中相同的作用域内, 可以出现同名的全局变量
	5.4在Go语言中相同的作用域内, 不能出现同名的全局变量

	6.特殊点
	6.1在C语言中局部变量没有初始化存储的是垃圾数据, 在Go语言中局部变量没有初始化, 会默认初始化为0
	6.2在C语言中全局变量没有初始化存储的是0, Go语言和C语言一样
	6.3在Go语言中, 如果定义了一个局部变量, 但是没有使用这个局部变量, 编译会报错
	6.4在Go语言中, 如果定义了一个全局变量, 但是没有使用这个全局变量, 编译不会报错
	 */

	 //var num int; // 局部变量
	 //var num int; // 报错
	 //fmt.Printf("%d\n", num)
	//test()
}

